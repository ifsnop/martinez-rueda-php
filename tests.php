<?php

declare(strict_types=1);
error_reporting(E_ALL);
ini_set("display_errors", 1);

use Ifsnop\MartinezRueda as MR;

include_once('autoloader.php');

$test = [
    0 => [
	'region_a' => [[[0,0], [0,1], [1,1], [1,0]]],
	'region_b' => [[[1,0], [2,0], [2,1], [1,1]]],
	'res' => [
	    'union' => [[[2,1], [2,0], [0,0], [0,1]]],
	],
    ],
    1 => [
	'region_a' => [[[0,0],[-1,0],[-1,1],[0,1],[-0.5,0.5]]],
	'region_b' => [[[0,0],[-2,2],[0,2]]],
	'res' => [
	    'union' => [[[0,2],[0,0],[-1,0],[-1,1],[-2,2]]],
	    'intersect' => [[[-1,1],[-0.5,0.5],[0,1]]],
	],
    ],
    2 => [
	'region_a' => [[ [3.1827730120236866, -14.647299060696893],
	    [3.292779172743269, -14.709442780204576],
	    [3.2790977409099513, -15.096879410975502] ]],
	'region_b' => [[  [3.3984917402267456, -14.277922392125454],
	    [3.3984917402267456, -14.919993494289331],
	    [3.2411990917407074, -14.919993494289326] ]],
	'res' => [
	    'difference' => [[[3.1827730120236866, -14.647299060696893],
		[3.2790977409099513, -15.096879410975502],
		[3.2853440594539682, -14.919993494289328],
		[3.2411990917407074, -14.919993494289326],
		[3.292779172743269, -14.709442780204576]]],
	],
    ],
    3 => [ // three triangles
	'region_a' => [[ [-1,1], [1,-1], [1,1] ]],
	'region_b' => [[ [0,0], [0,1], [1,0] ]],
	'res' => [
	    'union' => [[[-1,1],[1,-1],[1,1]]],
	    'difference' => [[[-1,1],[0,0],[0,1]],[[0,0],[1,-1],[1,0]],[[0,1],[1,0],[1,1]]],

	],
    ],
    4 => [ // end-to-end/vertical-intersection-rounding-error
	'region_a' => [[ [-0.1,49], [0.1,49], [-0.1,50], [-0.1,49] ]],
	'region_b' => [[  [-1.1741342,50.6250111], [0.0001,49.32584697546245], [0.0001,50.6251], [-1.1741342,50.6250111] ]],
	'res' => [
	    'union' => [[[0.1,49],[-0.1,49],[-0.1,49.43659688282012],[-1.1741342,50.6250111],[0.0001,50.6251],[0.0001,49.4995]]],
	],
    ],
    5 => [ // https://github.com/mfogel/polygon-clipping/blob/main/test/end-to-end/almost-colinear-segments-but-not-2/union.geojson
	'region_a' =>  [[ [-75.727,45.361],[-75.723,45.354],[-75.723,45.36],[-75.727,45.361] ]],
	'region_b' => [[ [-75.73,45.365],[-75.723,45.36],[-75.727,45.354],[-75.73,45.365] ]],
	'res' => [
	    'union' => [[[-75.73,45.365],[-75.727,45.354],[-75.72484615384616,45.35723076923077],[-75.723,45.354],[-75.723,45.36]]],
	],
    ],
    6 => [
	'region_a' => [[[-89.1214798,30.2253957],[-89.12099375,30.225243895877554],[-89.1205,30.224],[-89.1205,30.226],[-89.1214798,30.2253957]]],
	'region_b' => [[[-89.12119375,30.223],[-89.12,30.223],[-89.12,30.2251544],[-89.1207072,30.2251544],[-89.12119375,30.225306360283458],[-89.12119375,30.223]]],
	'res' => [
	    'difference' => [[[-89.1214798,30.2253957],[-89.1207072,30.2251544],[-89.1205,30.2251544],[-89.1205,30.226]]],
	],
    ],
];

foreach( $test as $test_number => $test_predicates ) {
    $pa = MR\Polygon::create()->fillFromArray($test_predicates['region_a']);
    $pb = MR\Polygon::create()->fillFromArray($test_predicates['region_b']);

    foreach ( $test_predicates['res'] as $op => $verified_result ) {
	$result = MR\Algorithm::$op($pa, $pb)->getArray();

	if ( MR\Algorithm::arrays_are_equal($result, $verified_result) )
	    print "Result PASS {$test_number} {$op}" . PHP_EOL;
	else {
	    print "Result FAIL {$test_number} {$op}" . PHP_EOL;
	    print "Expected: " . json_encode($verified_result) . PHP_EOL;
	    print "Got: " . json_encode($result) . PHP_EOL;
	}
    }
}

exit(0);



$region_a = [[[0,0],[-1,0],[-1,1],[0,1],[-0.5,0.5]]];
$region_b = [[[0,0],[-2,2],[0,2]]];
$result_union = [[[0,2],[0,0],[-1,0],[-1,1],[-2,2]]];
$result_intersect = [[[-1,1],[-0.5,0.5],[0,1]]];
$pa = Polygon::create()->fillFromArray($region_a);
$pb = Polygon::create()->fillFromArray($region_b);
$result = union($pa, $pb)->getArray();
if ( arrays_are_equal($result, $result_union) ) {
    print "OK 2" . PHP_EOL;
}
$result = intersect($pa, $pb)->getArray();
if ( arrays_are_equal($result, $result_intersect) ) {
    print "OK 3" . PHP_EOL;
}

$region_a = [[[-5.69091796875,75.50265886674975],[-6.218261718749999,75.29215785826014],[-6.87744140625,74.8219342035653],[-5.38330078125,74.61344527005673],[-3.27392578125,74.78737860165963],[-2.83447265625,75.26423875224219],[-3.251953125,75.59040636514479],[-5.69091796875,75.50265886674975]]];
$region_b = [[[-1.4501953125,75.1125778338579],[-1.9116210937499998,75.40331785380344],[-3.2958984375,75.49165372814439],[-3.80126953125,75.33672086232664],[-5.5810546875,74.95939165894974],[-7.31689453125,74.62510096387147],[-5.515136718749999,74.15208909789665],[-4.19677734375,74.86215220305225],[-2.373046875,74.55503734449476],[-1.4501953125,75.1125778338579]]];
$result_union = [[[-1.4501953125,75.1125778338579],[-2.373046875,74.55503734449476],[-3.5953601631730767,74.7608739958216],[-4.527530738644315,74.68400974275426],[-5.515136718749999,74.15208909789665],[-7.31689453125,74.62510096387147],[-6.539602834083374,74.77479298912367],[-6.87744140625,74.8219342035653],[-6.218261718749999,75.29215785826014],[-5.69091796875,75.50265886674975],[-3.251953125,75.59040636514479],[-3.110402964367213,75.47981657363235],[-1.9116210937499998,75.40331785380344]]];
$pa = Polygon::create()->fillFromArray($region_a);
$pb = Polygon::create()->fillFromArray($region_b);
$result = union($pa,$pb)->getArray();
if ( arrays_are_similar($result,$result_union) ) {
    print "OK 4" . PHP_EOL;
}

$region_a = [[[-4.1748046875, 75.52464464250062], [-6.701660156249999, 75.52464464250062], [-6.74560546875, 74.44346576284508], [-3.75732421875, 74.44935750063425], [-3.7353515625, 74.76429887097666], [-4.8779296875, 74.76718570583334], [-4.866943359375, 75.30331101068566], [-3.8452148437499996, 75.30331101068566], [-3.8452148437499996, 75.52464464250062], [-4.1748046875, 75.52464464250062]]];
$region_b = [[[-4.383544921875, 75.59587329063447], [-4.427490234375, 74.36371391783985], [-2.6806640625, 74.36667478672423], [-2.65869140625, 75.59860599198842], [-4.383544921875, 75.59587329063447]]];
$result_union = [[[-4.393979238329456,75.30331101068566],[-4.413142181792476,74.7660113749556],[-4.8779296875,74.76718570583334],[-4.866943359375,75.30331101068566]],
    [[-2.65869140625,75.59860599198842],[-2.6806640625,74.36667478672423],[-4.427490234375,74.36371391783985],[-4.4244826451389665,74.44804212159751],[-6.74560546875,74.44346576284508],[-6.701660156249999,75.52464464250062],[-4.386085311755,75.52464464250062],[-4.383544921875,75.59587329063447]]];
$result_intersect = [[[-3.8452148437499996,75.52464464250062], [-3.8452148437499996,75.30331101068566], [-4.393979238329456,75.30331101068566], [-4.386085311755,75.52464464250062]],
    [[-3.7353515625,74.76429887097666], [-3.75732421875,74.44935750063425], [-4.4244826451389665,74.44804212159751], [-4.413142181792476,74.7660113749556]]];
$pa = Polygon::create()->fillFromArray($region_a);
$pb = Polygon::create()->fillFromArray($region_b);
$result = union($pa,$pb)->getArray();
print json_encode($result) . PHP_EOL;
if ( arrays_are_equal($result,$result_union) ) {
    print "OK 5" . PHP_EOL;
}
$result = intersect($pa,$pb)->getArray();
print json_encode($result) . PHP_EOL;
if ( arrays_are_equal($result,$result_intersect) ) {
    print "OK 6" . PHP_EOL;
}

exit(0);

